<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.coretheorylife.modules.gym.dao.TGymAccountLogMapper" >

    <resultMap id="BaseResultMap" type="com.coretheorylife.modules.gym.entity.TGymAccountLog" >
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="gym_id" property="gymId" jdbcType="BIGINT" />
        <result column="coach_id" property="coachId" jdbcType="BIGINT" />
        <result column="type" property="type" jdbcType="INTEGER" />
        <result column="amount" property="amount" jdbcType="DECIMAL" />
        <result column="not_settle_amount" property="notSettleAmount" jdbcType="DECIMAL" />
        <result column="amount_after" property="amountAfter" jdbcType="DECIMAL" />
        <result column="not_settle_amount_after" property="notSettleAmountAfter" jdbcType="DECIMAL" />
        <result column="bank_id" property="bankId" jdbcType="BIGINT" />
        <result column="status" property="status" jdbcType="INTEGER" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="create_user" property="createUser" jdbcType="BIGINT" />
        <result column="update_user" property="updateUser" jdbcType="BIGINT" />
        <result column="version" property="version" jdbcType="INTEGER" />
        <result column="delete_flag" property="deleteFlag" jdbcType="BIT" />
    </resultMap>

    <sql id="Example_Where_Clause" >
        <where >
            <foreach collection="oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Update_By_Example_Where_Clause" >
        <where >
            <foreach collection="example.oredCriteria" item="criteria" separator="or" >
                <if test="criteria.valid" >
                    <trim prefix="(" suffix=")" prefixOverrides="and" >
                        <foreach collection="criteria.criteria" item="criterion" >
                            <choose >
                                <when test="criterion.noValue" >
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue" >
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue" >
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue" >
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Base_Column_List" >
        id, gym_id, coach_id, type, amount, not_settle_amount, amount_after, not_settle_amount_after, 
        bank_id, status, create_time, update_time, create_user, update_user, version, delete_flag
    </sql>

    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.coretheorylife.modules.gym.entity.TGymAccountLogExample" >
        select
        <if test="distinct" >
            distinct
        </if>
        <include refid="Base_Column_List" />
        from t_gym_account_log
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null" >
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
        select 
        <include refid="Base_Column_List" />
        from t_gym_account_log
        where id = #{id,jdbcType=BIGINT}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
        delete from t_gym_account_log
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <delete id="deleteByExample" parameterType="com.coretheorylife.modules.gym.entity.TGymAccountLogExample" >
        delete from t_gym_account_log
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </delete>

    <insert id="insert" parameterType="com.coretheorylife.modules.gym.entity.TGymAccountLog" >
        insert into t_gym_account_log (id, gym_id, coach_id, 
            type, amount, not_settle_amount, 
            amount_after, not_settle_amount_after, bank_id, 
            status, create_time, update_time, 
            create_user, update_user, version, 
            delete_flag)
        values (#{id,jdbcType=BIGINT}, #{gymId,jdbcType=BIGINT}, #{coachId,jdbcType=BIGINT}, 
            #{type,jdbcType=INTEGER}, #{amount,jdbcType=DECIMAL}, #{notSettleAmount,jdbcType=DECIMAL}, 
            #{amountAfter,jdbcType=DECIMAL}, #{notSettleAmountAfter,jdbcType=DECIMAL}, #{bankId,jdbcType=BIGINT}, 
            #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
            #{createUser,jdbcType=BIGINT}, #{updateUser,jdbcType=BIGINT}, #{version,jdbcType=INTEGER}, 
            #{deleteFlag,jdbcType=BIT})
    </insert>

    <insert id="insertSelective" parameterType="com.coretheorylife.modules.gym.entity.TGymAccountLog" >
        insert into t_gym_account_log
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="gymId != null" >
                gym_id,
            </if>
            <if test="coachId != null" >
                coach_id,
            </if>
            <if test="type != null" >
                type,
            </if>
            <if test="amount != null" >
                amount,
            </if>
            <if test="notSettleAmount != null" >
                not_settle_amount,
            </if>
            <if test="amountAfter != null" >
                amount_after,
            </if>
            <if test="notSettleAmountAfter != null" >
                not_settle_amount_after,
            </if>
            <if test="bankId != null" >
                bank_id,
            </if>
            <if test="status != null" >
                status,
            </if>
            <if test="createTime != null" >
                create_time,
            </if>
            <if test="updateTime != null" >
                update_time,
            </if>
            <if test="createUser != null" >
                create_user,
            </if>
            <if test="updateUser != null" >
                update_user,
            </if>
            <if test="version != null" >
                version,
            </if>
            <if test="deleteFlag != null" >
                delete_flag,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=BIGINT},
            </if>
            <if test="gymId != null" >
                #{gymId,jdbcType=BIGINT},
            </if>
            <if test="coachId != null" >
                #{coachId,jdbcType=BIGINT},
            </if>
            <if test="type != null" >
                #{type,jdbcType=INTEGER},
            </if>
            <if test="amount != null" >
                #{amount,jdbcType=DECIMAL},
            </if>
            <if test="notSettleAmount != null" >
                #{notSettleAmount,jdbcType=DECIMAL},
            </if>
            <if test="amountAfter != null" >
                #{amountAfter,jdbcType=DECIMAL},
            </if>
            <if test="notSettleAmountAfter != null" >
                #{notSettleAmountAfter,jdbcType=DECIMAL},
            </if>
            <if test="bankId != null" >
                #{bankId,jdbcType=BIGINT},
            </if>
            <if test="status != null" >
                #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null" >
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createUser != null" >
                #{createUser,jdbcType=BIGINT},
            </if>
            <if test="updateUser != null" >
                #{updateUser,jdbcType=BIGINT},
            </if>
            <if test="version != null" >
                #{version,jdbcType=INTEGER},
            </if>
            <if test="deleteFlag != null" >
                #{deleteFlag,jdbcType=BIT},
            </if>
        </trim>
    </insert>

    <select id="countByExample" parameterType="com.coretheorylife.modules.gym.entity.TGymAccountLogExample" resultType="java.lang.Integer" >
        select count(*) from t_gym_account_log
        <if test="_parameter != null" >
            <include refid="Example_Where_Clause" />
        </if>
    </select>

    <update id="updateByExampleSelective" parameterType="map" >
        update t_gym_account_log
        <set >
            <if test="record.id != null" >
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.gymId != null" >
                gym_id = #{record.gymId,jdbcType=BIGINT},
            </if>
            <if test="record.coachId != null" >
                coach_id = #{record.coachId,jdbcType=BIGINT},
            </if>
            <if test="record.type != null" >
                type = #{record.type,jdbcType=INTEGER},
            </if>
            <if test="record.amount != null" >
                amount = #{record.amount,jdbcType=DECIMAL},
            </if>
            <if test="record.notSettleAmount != null" >
                not_settle_amount = #{record.notSettleAmount,jdbcType=DECIMAL},
            </if>
            <if test="record.amountAfter != null" >
                amount_after = #{record.amountAfter,jdbcType=DECIMAL},
            </if>
            <if test="record.notSettleAmountAfter != null" >
                not_settle_amount_after = #{record.notSettleAmountAfter,jdbcType=DECIMAL},
            </if>
            <if test="record.bankId != null" >
                bank_id = #{record.bankId,jdbcType=BIGINT},
            </if>
            <if test="record.status != null" >
                status = #{record.status,jdbcType=INTEGER},
            </if>
            <if test="record.createTime != null" >
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null" >
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.createUser != null" >
                create_user = #{record.createUser,jdbcType=BIGINT},
            </if>
            <if test="record.updateUser != null" >
                update_user = #{record.updateUser,jdbcType=BIGINT},
            </if>
            <if test="record.version != null" >
                version = #{record.version,jdbcType=INTEGER},
            </if>
            <if test="record.deleteFlag != null" >
                delete_flag = #{record.deleteFlag,jdbcType=BIT},
            </if>
        </set>
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByExample" parameterType="map" >
        update t_gym_account_log
        set id = #{record.id,jdbcType=BIGINT},
            gym_id = #{record.gymId,jdbcType=BIGINT},
            coach_id = #{record.coachId,jdbcType=BIGINT},
            type = #{record.type,jdbcType=INTEGER},
            amount = #{record.amount,jdbcType=DECIMAL},
            not_settle_amount = #{record.notSettleAmount,jdbcType=DECIMAL},
            amount_after = #{record.amountAfter,jdbcType=DECIMAL},
            not_settle_amount_after = #{record.notSettleAmountAfter,jdbcType=DECIMAL},
            bank_id = #{record.bankId,jdbcType=BIGINT},
            status = #{record.status,jdbcType=INTEGER},
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            create_user = #{record.createUser,jdbcType=BIGINT},
            update_user = #{record.updateUser,jdbcType=BIGINT},
            version = #{record.version,jdbcType=INTEGER},
            delete_flag = #{record.deleteFlag,jdbcType=BIT}
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="com.coretheorylife.modules.gym.entity.TGymAccountLog" >
        update t_gym_account_log
        <set >
            <if test="gymId != null" >
                gym_id = #{gymId,jdbcType=BIGINT},
            </if>
            <if test="coachId != null" >
                coach_id = #{coachId,jdbcType=BIGINT},
            </if>
            <if test="type != null" >
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="amount != null" >
                amount = #{amount,jdbcType=DECIMAL},
            </if>
            <if test="notSettleAmount != null" >
                not_settle_amount = #{notSettleAmount,jdbcType=DECIMAL},
            </if>
            <if test="amountAfter != null" >
                amount_after = #{amountAfter,jdbcType=DECIMAL},
            </if>
            <if test="notSettleAmountAfter != null" >
                not_settle_amount_after = #{notSettleAmountAfter,jdbcType=DECIMAL},
            </if>
            <if test="bankId != null" >
                bank_id = #{bankId,jdbcType=BIGINT},
            </if>
            <if test="status != null" >
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null" >
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createUser != null" >
                create_user = #{createUser,jdbcType=BIGINT},
            </if>
            <if test="updateUser != null" >
                update_user = #{updateUser,jdbcType=BIGINT},
            </if>
            <if test="version != null" >
                version = #{version,jdbcType=INTEGER},
            </if>
            <if test="deleteFlag != null" >
                delete_flag = #{deleteFlag,jdbcType=BIT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.coretheorylife.modules.gym.entity.TGymAccountLog" >
        update t_gym_account_log
        set gym_id = #{gymId,jdbcType=BIGINT},
            coach_id = #{coachId,jdbcType=BIGINT},
            type = #{type,jdbcType=INTEGER},
            amount = #{amount,jdbcType=DECIMAL},
            not_settle_amount = #{notSettleAmount,jdbcType=DECIMAL},
            amount_after = #{amountAfter,jdbcType=DECIMAL},
            not_settle_amount_after = #{notSettleAmountAfter,jdbcType=DECIMAL},
            bank_id = #{bankId,jdbcType=BIGINT},
            status = #{status,jdbcType=INTEGER},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            update_time = #{updateTime,jdbcType=TIMESTAMP},
            create_user = #{createUser,jdbcType=BIGINT},
            update_user = #{updateUser,jdbcType=BIGINT},
            version = #{version,jdbcType=INTEGER},
            delete_flag = #{deleteFlag,jdbcType=BIT}
        where id = #{id,jdbcType=BIGINT}
    </update>
</mapper>